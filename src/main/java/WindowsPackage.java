import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathFactory;

/*
 * This file is part of jYTdl.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * Copyright (C) hdsdi3g for hd3g.tv 2018
 * 
*/

public class WindowsPackage {// TODO remove from here
	
	public static void main(String[] args) throws Exception {
		File get_wd = new File(".").getCanonicalFile();
		
		/**
		 * Correct working path (must be project root path).
		 */
		if (new File(get_wd.getPath() + File.separator + "WinRun4J64.exe").exists()) {
			get_wd = get_wd.getParentFile();
		}
		
		/**
		 * Get artifactId & version from pom.xml file
		 */
		File pom_file = new File(get_wd.getPath() + File.separator + "pom.xml");
		if (pom_file.exists() == false) {
			throw new FileNotFoundException("Can't found pom file: " + pom_file.getPath());
		}
		DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
		Document xml = builder.parse(pom_file);
		Element root = xml.getDocumentElement();
		XPathFactory xpf = XPathFactory.newInstance();
		XPath path = xpf.newXPath();
		final String artifact_id = path.evaluate("/project/artifactId/text()", root);
		final String version = path.evaluate("/project/version/text()", root);
		final String main_class = path.evaluate("/project/build/plugins/plugin[artifactId/text()='appassembler-maven-plugin']/configuration/programs/program/mainClass/text()", root);
		
		/**
		 * Prepare out dirs
		 */
		final File target_dir = new File(get_wd.getPath() + File.separator + "target");
		final File dependency_dir = new File(target_dir.getPath() + File.separator + "dependency");
		final File winrun_dir = new File(get_wd.getPath() + File.separator + "win64-ressources");
		final File winrun_dir_exe = new File(winrun_dir.getPath() + File.separator + "WinRun4J64.exe");
		final File winrun_dir_rcedit = new File(winrun_dir.getPath() + File.separator + "RCEDIT64.exe");
		final File winrun_dir_icon = new File(winrun_dir.getPath() + File.separator + "icon.ico");
		// final File winrun_dir_ini = new File(winrun_dir.getPath() + File.separator + "WinRun4J64.ini");
		final File config_dir = new File(get_wd.getPath() + File.separator + "src" + File.separator + "main" + File.separator + "config");
		
		/**
		 * Check out dirs
		 */
		if (target_dir.exists() == false) {
			throw new FileNotFoundException("Can't found dir " + target_dir + ", please invoke maven before");
		} else if (dependency_dir.exists() == false) {
			throw new FileNotFoundException("Can't found dir " + dependency_dir + ", please invoke \"mvn dependency:copy-dependencies\" before");
		} else if (winrun_dir.exists() == false) {
			throw new FileNotFoundException("Can't found dir " + winrun_dir);
		} else if (winrun_dir_exe.exists() == false /*| winrun_dir_ini.exists() == false*/) {
			throw new FileNotFoundException("Can't found WinRun4J64 exe file in " + winrun_dir);
		} else if (winrun_dir_rcedit.exists() == false /*| winrun_dir_ini.exists() == false*/) {
			throw new FileNotFoundException("Can't found RCEDIT64.exe file in " + winrun_dir);
		} else if (config_dir.exists() == false) {
			throw new FileNotFoundException("Can't found config dir " + config_dir);
		}
		
		/**
		 * Find main jar file
		 */
		File main_app_jar = Arrays.stream(target_dir.listFiles((dir, name) -> {
			return name.toLowerCase().startsWith(artifact_id) & name.toLowerCase().endsWith(".jar");
		})).findFirst().orElseThrow(() -> new IOException("Can't found main jar App, generated by \"mvn package -Dmaven.test.skip=true\""));
		
		final File win_deploy_dir = new File(target_dir.getPath() + File.separator + "win_deploy");
		final File win_deploy_bin_dir = new File(win_deploy_dir.getPath() + File.separator + "bin");
		final File win_deploy_lib_dir = new File(win_deploy_dir.getPath() + File.separator + "lib");
		final File win_deploy_config_dir = new File(win_deploy_dir.getPath() + File.separator + "config");
		
		if (win_deploy_bin_dir.mkdirs() == false) {
			throw new IOException("Can't create dir " + win_deploy_dir);
		}
		/**
		 * Move dependency to lib
		 */
		if (dependency_dir.renameTo(win_deploy_lib_dir) == false) {
			throw new IOException("Can't move dir " + dependency_dir + " to " + win_deploy_dir);
		}
		if (win_deploy_config_dir.mkdirs() == false) {
			throw new IOException("Can't create dir " + win_deploy_dir);
		}
		
		/**
		 * Copy WinRun4J64 exe and main jar
		 */
		File winrun_exec_dest = new File(win_deploy_dir.getPath() + File.separator + artifact_id + "-" + version + ".exe");
		Files.copy(winrun_dir_exe.toPath(), winrun_exec_dest.toPath());
		Files.copy(main_app_jar.toPath(), new File(win_deploy_lib_dir.getAbsolutePath() + File.separator + main_app_jar.getName()).toPath());
		
		/**
		 * Bake icon in exe
		 */
		if (winrun_dir_icon.exists()) {
			ProcessBuilder process_builder = new ProcessBuilder(winrun_dir_rcedit.getAbsolutePath(), "/I", winrun_exec_dest.getAbsolutePath(), "icon.ico");
			Process process = process_builder.start();
			process.waitFor(2, TimeUnit.SECONDS);
			if (process.exitValue() != 0) {
				System.err.println("ERROR: invalid icon embedding in WinRun4J64 exe (" + winrun_exec_dest.getAbsolutePath() + ")");
			}
		} else {
			System.out.println("Can't found icon in " + winrun_dir_icon.getAbsolutePath() + ", ignore icon baking in exe");
		}
		
		/**
		 * Write WinRun4J64 ini content
		 * @see https://github.com/poidasmith/winrun4j
		 */
		ArrayList<String> ini_content = new ArrayList<>();
		ini_content.add("vm.version.min=11.0.1");
		ini_content.add("main.class=" + main_class);
		ini_content.add("console.title=" + artifact_id + " v" + version);
		ini_content.add("working.directory=%PWD%");
		ini_content.add("classpath.1=.\\" + win_deploy_config_dir.getName());
		ini_content.add("classpath.2=.\\" + win_deploy_lib_dir.getName() + "\\*.jar");
		ini_content.add("classpath.3=.\\" + win_deploy_bin_dir.getName());
		ini_content.add("vm.location=%JAVA_HOME%\\bin\\server\\jvm.dll");
		ini_content.add("vmarg.1=-Dfile.encoding=UTF-8");
		ini_content.add("log.level=error");
		// StandardOpenOption
		Files.writeString(new File(win_deploy_dir.getPath() + File.separator + artifact_id + "-" + version + ".ini").toPath(), ini_content.stream().collect(Collectors.joining("\r\n")));
		
		/**
		 * Warn if trouble with JAVA_HOME / JVM localisation.
		 */
		String env_javahome = System.getenv("JAVA_HOME");
		if (env_javahome == null) {
			System.err.println("JAVA_HOME WARNING ! On this host, the JAVA_HOME environment is not set. You can ignore this message if you will not run " + artifact_id + " from this host.");
		} else {
			File jvm_dll = Path.of(env_javahome, "bin", "server", "jvm.dll").toFile();
			if (jvm_dll.exists() == false) {
				System.err.println("JAVA_HOME WARNING ! Can't found \"%JAVA_HOME%\\bin\\server\\jvm.dll\" aka \"" + jvm_dll.getAbsolutePath() + "\" file (JVM file). You can ignore this message if you will not run " + artifact_id + " from this host.");
			}
		}
		
		/**
		 * Copy conf dir
		 */
		Arrays.stream(config_dir.listFiles((dir, name) -> {
			return name.startsWith(".") == false & new File(dir.getAbsolutePath() + File.separator + name).isHidden() == false;
		})).forEach(config_f -> {
			try {
				Files.copy(config_f.toPath(), new File(win_deploy_config_dir + File.separator + config_f.getName()).toPath());
			} catch (IOException e) {
				throw new RuntimeException("Can't copy " + config_f + " to " + win_deploy_config_dir, e);
			}
		});
		
		/**
		 * Display user instructions
		 */
		Files.readAllLines(new File(get_wd.getPath() + File.separator + "DEPENDENCIES.TXT").toPath()).forEach(line -> {
			System.out.println(line);
		});
		System.out.println("Don't forget to add binaries dependencies in " + win_deploy_bin_dir + " or in global PATH");
	}
	
}
